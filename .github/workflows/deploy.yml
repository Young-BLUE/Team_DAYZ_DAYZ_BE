# This is a basic workflow to help you get started with Actions

name: Spring Boot & Gradle CI/CD 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
env:
    S3_BUCKET_NAME: dayz-s3

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean build
      
     # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: mkdir deploy

    # Jar 파일 Copy
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/
      
    # Appspec 파일 복사
    - name: Copy appspec
      run: cp ./appspec.yml ./deploy
      
    # Deploy Shell 파일 복사
    - name: Copy deploy shell
      run: cp ./deploy.sh ./deploy

    # 압축파일 형태로 전달
    - name: Make zip file
      run: zip -r ./dayz-build.zip ./deploy

    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws s3 cp --region ap-northeast-2 --acl private ./dayz-build.zip s3://$S3_BUCKET_NAME/dayz-deploy/
    # Deploy
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name dayz \
        --deployment-group-name dayz-deploy-group \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=dayz-deploy/dayz-build.zip \
        --region ap-northeast-2
